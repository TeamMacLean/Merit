{"name":"Merit","tagline":"A web app for serving Mozilla Badges build on top of Play Framework 2","body":"Merit\r\n============\r\n\r\n###An app for issuing [OpenBadges](http://openbadges.org/).\r\n\r\nMerit makes it very quick and easy to get up and running with issuing badges, it takes about 5 minutes to go from 0-to-live. The app is build on top of [Play! Framework](http://www.playframework.com/) and written in a mix of Java and Scala (with some javascript and css sprinkles).\r\n\r\n###UPDATE: Merit now supports play 2.2.3\r\n####If you are intersted in trying Merit or have any questions please do not hesitate to contact me wookoouk@gmail.com (or submit a Issue).\r\n\r\nHow to use\r\n----------\r\n\r\nDefault login details:\r\nemail: martin.page@tsl.ac.uk\r\npassword: B0nF1rE\r\n\r\nYou can change the default email and password in: Merit/app/Global.java\r\n\r\n\r\n####Images\r\nImages must exist before a badge or issuer can be created.\r\n\r\n####Issuers\r\nAn issuer is a company or institute that provides the badge and can be contacted to ensure that the badge is genuine.\r\n\r\n####Alignments\r\nAn alignment is the requirement that must be fill before the badge can be given. These are useally standardised.\r\n\r\n####Badges\r\nThe badge is a template for the assertion, only one of each exists.\r\n\r\n####Assertions\r\nAssertions are a individual object that links a user to a badge, it is the object that is created when a user earns a badge.\r\n\r\nInstallation\r\n------------\r\n\r\n####Requirements\r\n\r\n* Git\r\n* Java 1.6+\r\n* Thats it!\r\n\r\n###Download\r\n\r\n`cd /opt`\r\n\r\n`git clone https://github.com/wookoouk/Merit.git`\r\n\r\n`cd Merit`\r\n\r\n###Config\r\n\r\nAs default Merit will store all the database info in a H2 db, it is configured to save it in the running users home directory.\r\nTo change this look in conf/application.conf, I have commented out the option to just save to memory.\r\n\r\nIf you would like to use an alternative database, just google `play framework *DB NAME*` and it should come back with help.\r\n\r\nFor MySQL make the following changes:\r\n\r\n\r\nin project/Build.scala, add:\r\n`\r\n\"mysql\" % \"mysql-connector-java\" % \"5.1.18\"\r\n`\r\n\r\nand in conf/application.conf modify:\r\n`\r\ndb.default.driver=com.mysql.jdbc.Driver\r\ndb.default.url=\"mysql://root:secret@localhost/myDatabase\"\r\n`\r\n\r\nEmail settings are at the bottom of conf/application.conf, without a smtp server to hook it up to you will not be able to add new users.\r\nFor testing I suggest using the gmail smtp server.\r\n\r\n###Running\r\n\r\nTo get Merit up and running for testing you can just execute `play run`, this will start in development mode on port 9000.\r\n\r\nTo run in production you should stage the app by running `play clean compile stage`, to start the server in production run:    \r\n```nohup target/universal/stage/bin/merit -Dhttp.port=80 &```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}